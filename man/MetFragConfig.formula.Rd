% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MetFragConfigR.R
\name{MetFragConfig.formula}
\alias{MetFragConfig.formula}
\title{Create MetFrag Config Files with Molecular Formula Candidate Searching}
\usage{
MetFragConfig.formula(mol_form, adduct_type, IsPosMode, results_filename, peaklist_path, base_dir, ...)
}
\arguments{
\item{mol_form}{The molecular formula (as a string) with which to search the candidate database (\code{DB}).
\code{mass} is calculated automatically.}

\item{adduct_type}{The adduct species used to define mass (if \code{neutralPrecursorMass=FALSE}) and fragmentation settings
in the config file, entered as either \code{PrecursorIonType} (text) or \code{PrecursorIonmode} (a number). The available
options are given in the system file \code{MetFragAdductTypes.csv} in the \code{extdata} folder.
Recommended default values (if ion state is unclear) are \code{[M+H]+} (1) for positive and \code{[M-H]-} (-1) for negative mode.}

\item{results_filename}{Enter a base filename for naming the results files - do not include file endings}

\item{peaklist_path}{Enter the full path and file name to the peak list for this config file}

\item{base_dir}{Enter the directory name to set up the subfolders for MetFrag batch results. If the folders don't exist,
subfolders \code{config}, \code{log} and \code{results} are created; the output of this function is saved in \code{config}.}

\item{isPosMode}{Use \code{TRUE} or \code{FALSE} to set positive or negative ionization as appropriate.}
}
\value{
Returns a MetFrag config file name
}
\description{
This is a molecular formula-specific wrapper function for \code{\link{MetFragConfig}}.
}
\details{
Remaining parameters are described in \code{\link{MetFragConfig}}
}
\examples{
# Example of Simazine
peaklist_path <- system.file("extdata","EA026206_Simazine_peaks.txt",package="ReSOLUTION")
# change this directory to an existing one, or this example won't work
test_dir <- "C:/DATA/Workflow/MetFrag22/metfrag_test_results"
testCSV <- system.file("extdata","dsstox_MS_Ready_MetFragTestCSV5.csv",package="ReSOLUTION")

config_file <- MetFragConfig.formula("C7H12ClN5","[M+H]+",IsPosMode=TRUE, "Simazine_formula_PubChem",peaklist_path, test_dir,
DB="PubChem")
config_file2 <- MetFragConfig.formula("C7H12ClN5",1,IsPosMode=TRUE, "Simazine_formula_CompTox",peaklist_path,test_dir,
DB="LocalCSV",localDB_path=testCSV)
config_file3 <- MetFragConfig.formula("C7H12ClN5",1,IsPosMode=TRUE, "Simazine_formula_CompTox_noInChIFilter",peaklist_path,test_dir,
DB="LocalCSV",localDB_path=testCSV,filter_by_InChIKey = FALSE)

metfrag_dir <- "C:/DATA/Workflow/MetFrag22/"
MetFragCL_name <- "MetFrag2.4.4-msready-CL.jar"
#note this first query is a longer query using PubChem
runMetFrag(config_file, metfrag_dir, MetFragCL_name)
runMetFrag(config_file2, metfrag_dir, MetFragCL_name)
runMetFrag(config_file3, metfrag_dir, MetFragCL_name)

}
\seealso{
\code{\link{MetFragConfig}}, \code{\link{runMetFrag}}, \code{\link{getAdductMassesFromFormula}}
}
\author{
Emma Schymanski <emma.schymanski@uni.lu> in partnership with Christoph Ruttkies (MetFragCL),
Antony J. Williams and team (CompTox Dashboard)
}
